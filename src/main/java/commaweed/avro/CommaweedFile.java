/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package commaweed.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CommaweedFile extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3415882472554389032L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommaweedFile\",\"namespace\":\"commaweed.avro\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"parameters\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"chunks\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommaweedFileChunk\",\"fields\":[{\"name\":\"chunk_type\",\"type\":\"string\"},{\"name\":\"payload\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommaweedChunkContent\",\"fields\":[{\"name\":\"bytes\",\"type\":\"bytes\"}]}}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence file_id;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> parameters;
  @Deprecated public java.util.List<commaweed.avro.CommaweedFileChunk> chunks;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CommaweedFile() {}

  /**
   * All-args constructor.
   * @param file_id The new value for file_id
   * @param parameters The new value for parameters
   * @param chunks The new value for chunks
   */
  public CommaweedFile(java.lang.CharSequence file_id, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> parameters, java.util.List<commaweed.avro.CommaweedFileChunk> chunks) {
    this.file_id = file_id;
    this.parameters = parameters;
    this.chunks = chunks;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return file_id;
    case 1: return parameters;
    case 2: return chunks;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: file_id = (java.lang.CharSequence)value$; break;
    case 1: parameters = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 2: chunks = (java.util.List<commaweed.avro.CommaweedFileChunk>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'file_id' field.
   * @return The value of the 'file_id' field.
   */
  public java.lang.CharSequence getFileId() {
    return file_id;
  }

  /**
   * Sets the value of the 'file_id' field.
   * @param value the value to set.
   */
  public void setFileId(java.lang.CharSequence value) {
    this.file_id = value;
  }

  /**
   * Gets the value of the 'parameters' field.
   * @return The value of the 'parameters' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParameters() {
    return parameters;
  }

  /**
   * Sets the value of the 'parameters' field.
   * @param value the value to set.
   */
  public void setParameters(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.parameters = value;
  }

  /**
   * Gets the value of the 'chunks' field.
   * @return The value of the 'chunks' field.
   */
  public java.util.List<commaweed.avro.CommaweedFileChunk> getChunks() {
    return chunks;
  }

  /**
   * Sets the value of the 'chunks' field.
   * @param value the value to set.
   */
  public void setChunks(java.util.List<commaweed.avro.CommaweedFileChunk> value) {
    this.chunks = value;
  }

  /**
   * Creates a new CommaweedFile RecordBuilder.
   * @return A new CommaweedFile RecordBuilder
   */
  public static commaweed.avro.CommaweedFile.Builder newBuilder() {
    return new commaweed.avro.CommaweedFile.Builder();
  }

  /**
   * Creates a new CommaweedFile RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CommaweedFile RecordBuilder
   */
  public static commaweed.avro.CommaweedFile.Builder newBuilder(commaweed.avro.CommaweedFile.Builder other) {
    return new commaweed.avro.CommaweedFile.Builder(other);
  }

  /**
   * Creates a new CommaweedFile RecordBuilder by copying an existing CommaweedFile instance.
   * @param other The existing instance to copy.
   * @return A new CommaweedFile RecordBuilder
   */
  public static commaweed.avro.CommaweedFile.Builder newBuilder(commaweed.avro.CommaweedFile other) {
    return new commaweed.avro.CommaweedFile.Builder(other);
  }

  /**
   * RecordBuilder for CommaweedFile instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommaweedFile>
    implements org.apache.avro.data.RecordBuilder<CommaweedFile> {

    private java.lang.CharSequence file_id;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> parameters;
    private java.util.List<commaweed.avro.CommaweedFileChunk> chunks;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(commaweed.avro.CommaweedFile.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.file_id)) {
        this.file_id = data().deepCopy(fields()[0].schema(), other.file_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parameters)) {
        this.parameters = data().deepCopy(fields()[1].schema(), other.parameters);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chunks)) {
        this.chunks = data().deepCopy(fields()[2].schema(), other.chunks);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CommaweedFile instance
     * @param other The existing instance to copy.
     */
    private Builder(commaweed.avro.CommaweedFile other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.file_id)) {
        this.file_id = data().deepCopy(fields()[0].schema(), other.file_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.parameters)) {
        this.parameters = data().deepCopy(fields()[1].schema(), other.parameters);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.chunks)) {
        this.chunks = data().deepCopy(fields()[2].schema(), other.chunks);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'file_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getFileId() {
      return file_id;
    }

    /**
      * Sets the value of the 'file_id' field.
      * @param value The value of 'file_id'.
      * @return This builder.
      */
    public commaweed.avro.CommaweedFile.Builder setFileId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.file_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'file_id' field has been set.
      * @return True if the 'file_id' field has been set, false otherwise.
      */
    public boolean hasFileId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'file_id' field.
      * @return This builder.
      */
    public commaweed.avro.CommaweedFile.Builder clearFileId() {
      file_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'parameters' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getParameters() {
      return parameters;
    }

    /**
      * Sets the value of the 'parameters' field.
      * @param value The value of 'parameters'.
      * @return This builder.
      */
    public commaweed.avro.CommaweedFile.Builder setParameters(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.parameters = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'parameters' field has been set.
      * @return True if the 'parameters' field has been set, false otherwise.
      */
    public boolean hasParameters() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'parameters' field.
      * @return This builder.
      */
    public commaweed.avro.CommaweedFile.Builder clearParameters() {
      parameters = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'chunks' field.
      * @return The value.
      */
    public java.util.List<commaweed.avro.CommaweedFileChunk> getChunks() {
      return chunks;
    }

    /**
      * Sets the value of the 'chunks' field.
      * @param value The value of 'chunks'.
      * @return This builder.
      */
    public commaweed.avro.CommaweedFile.Builder setChunks(java.util.List<commaweed.avro.CommaweedFileChunk> value) {
      validate(fields()[2], value);
      this.chunks = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'chunks' field has been set.
      * @return True if the 'chunks' field has been set, false otherwise.
      */
    public boolean hasChunks() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'chunks' field.
      * @return This builder.
      */
    public commaweed.avro.CommaweedFile.Builder clearChunks() {
      chunks = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public CommaweedFile build() {
      try {
        CommaweedFile record = new CommaweedFile();
        record.file_id = fieldSetFlags()[0] ? this.file_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.parameters = fieldSetFlags()[1] ? this.parameters : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[1]);
        record.chunks = fieldSetFlags()[2] ? this.chunks : (java.util.List<commaweed.avro.CommaweedFileChunk>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
