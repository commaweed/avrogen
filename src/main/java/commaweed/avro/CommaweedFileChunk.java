/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package commaweed.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CommaweedFileChunk extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2613196959182428723L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommaweedFileChunk\",\"namespace\":\"commaweed.avro\",\"fields\":[{\"name\":\"chunk_type\",\"type\":\"string\"},{\"name\":\"payload\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommaweedChunkContent\",\"fields\":[{\"name\":\"bytes\",\"type\":\"bytes\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence chunk_type;
  @Deprecated public java.util.List<commaweed.avro.CommaweedChunkContent> payload;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CommaweedFileChunk() {}

  /**
   * All-args constructor.
   * @param chunk_type The new value for chunk_type
   * @param payload The new value for payload
   */
  public CommaweedFileChunk(java.lang.CharSequence chunk_type, java.util.List<commaweed.avro.CommaweedChunkContent> payload) {
    this.chunk_type = chunk_type;
    this.payload = payload;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return chunk_type;
    case 1: return payload;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: chunk_type = (java.lang.CharSequence)value$; break;
    case 1: payload = (java.util.List<commaweed.avro.CommaweedChunkContent>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'chunk_type' field.
   * @return The value of the 'chunk_type' field.
   */
  public java.lang.CharSequence getChunkType() {
    return chunk_type;
  }

  /**
   * Sets the value of the 'chunk_type' field.
   * @param value the value to set.
   */
  public void setChunkType(java.lang.CharSequence value) {
    this.chunk_type = value;
  }

  /**
   * Gets the value of the 'payload' field.
   * @return The value of the 'payload' field.
   */
  public java.util.List<commaweed.avro.CommaweedChunkContent> getPayload() {
    return payload;
  }

  /**
   * Sets the value of the 'payload' field.
   * @param value the value to set.
   */
  public void setPayload(java.util.List<commaweed.avro.CommaweedChunkContent> value) {
    this.payload = value;
  }

  /**
   * Creates a new CommaweedFileChunk RecordBuilder.
   * @return A new CommaweedFileChunk RecordBuilder
   */
  public static commaweed.avro.CommaweedFileChunk.Builder newBuilder() {
    return new commaweed.avro.CommaweedFileChunk.Builder();
  }

  /**
   * Creates a new CommaweedFileChunk RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CommaweedFileChunk RecordBuilder
   */
  public static commaweed.avro.CommaweedFileChunk.Builder newBuilder(commaweed.avro.CommaweedFileChunk.Builder other) {
    return new commaweed.avro.CommaweedFileChunk.Builder(other);
  }

  /**
   * Creates a new CommaweedFileChunk RecordBuilder by copying an existing CommaweedFileChunk instance.
   * @param other The existing instance to copy.
   * @return A new CommaweedFileChunk RecordBuilder
   */
  public static commaweed.avro.CommaweedFileChunk.Builder newBuilder(commaweed.avro.CommaweedFileChunk other) {
    return new commaweed.avro.CommaweedFileChunk.Builder(other);
  }

  /**
   * RecordBuilder for CommaweedFileChunk instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommaweedFileChunk>
    implements org.apache.avro.data.RecordBuilder<CommaweedFileChunk> {

    private java.lang.CharSequence chunk_type;
    private java.util.List<commaweed.avro.CommaweedChunkContent> payload;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(commaweed.avro.CommaweedFileChunk.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.chunk_type)) {
        this.chunk_type = data().deepCopy(fields()[0].schema(), other.chunk_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.payload)) {
        this.payload = data().deepCopy(fields()[1].schema(), other.payload);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CommaweedFileChunk instance
     * @param other The existing instance to copy.
     */
    private Builder(commaweed.avro.CommaweedFileChunk other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.chunk_type)) {
        this.chunk_type = data().deepCopy(fields()[0].schema(), other.chunk_type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.payload)) {
        this.payload = data().deepCopy(fields()[1].schema(), other.payload);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'chunk_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getChunkType() {
      return chunk_type;
    }

    /**
      * Sets the value of the 'chunk_type' field.
      * @param value The value of 'chunk_type'.
      * @return This builder.
      */
    public commaweed.avro.CommaweedFileChunk.Builder setChunkType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.chunk_type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'chunk_type' field has been set.
      * @return True if the 'chunk_type' field has been set, false otherwise.
      */
    public boolean hasChunkType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'chunk_type' field.
      * @return This builder.
      */
    public commaweed.avro.CommaweedFileChunk.Builder clearChunkType() {
      chunk_type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'payload' field.
      * @return The value.
      */
    public java.util.List<commaweed.avro.CommaweedChunkContent> getPayload() {
      return payload;
    }

    /**
      * Sets the value of the 'payload' field.
      * @param value The value of 'payload'.
      * @return This builder.
      */
    public commaweed.avro.CommaweedFileChunk.Builder setPayload(java.util.List<commaweed.avro.CommaweedChunkContent> value) {
      validate(fields()[1], value);
      this.payload = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'payload' field has been set.
      * @return True if the 'payload' field has been set, false otherwise.
      */
    public boolean hasPayload() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'payload' field.
      * @return This builder.
      */
    public commaweed.avro.CommaweedFileChunk.Builder clearPayload() {
      payload = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public CommaweedFileChunk build() {
      try {
        CommaweedFileChunk record = new CommaweedFileChunk();
        record.chunk_type = fieldSetFlags()[0] ? this.chunk_type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.payload = fieldSetFlags()[1] ? this.payload : (java.util.List<commaweed.avro.CommaweedChunkContent>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
