/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package commaweed.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CommaweedSystem extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1953070945698606201L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CommaweedSystem\",\"namespace\":\"commaweed.avro\",\"fields\":[{\"name\":\"commaweed_id\",\"type\":\"string\"},{\"name\":\"commaweed_header\",\"type\":\"string\"},{\"name\":\"files\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommaweedFile\",\"fields\":[{\"name\":\"file_id\",\"type\":\"string\"},{\"name\":\"parameters\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"chunks\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommaweedFileChunk\",\"fields\":[{\"name\":\"chunk_type\",\"type\":\"string\"},{\"name\":\"payload\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"CommaweedChunkContent\",\"fields\":[{\"name\":\"bytes\",\"type\":\"bytes\"}]}}}]}}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence commaweed_id;
  @Deprecated public java.lang.CharSequence commaweed_header;
  @Deprecated public java.util.List<commaweed.avro.CommaweedFile> files;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CommaweedSystem() {}

  /**
   * All-args constructor.
   * @param commaweed_id The new value for commaweed_id
   * @param commaweed_header The new value for commaweed_header
   * @param files The new value for files
   */
  public CommaweedSystem(java.lang.CharSequence commaweed_id, java.lang.CharSequence commaweed_header, java.util.List<commaweed.avro.CommaweedFile> files) {
    this.commaweed_id = commaweed_id;
    this.commaweed_header = commaweed_header;
    this.files = files;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return commaweed_id;
    case 1: return commaweed_header;
    case 2: return files;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: commaweed_id = (java.lang.CharSequence)value$; break;
    case 1: commaweed_header = (java.lang.CharSequence)value$; break;
    case 2: files = (java.util.List<commaweed.avro.CommaweedFile>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'commaweed_id' field.
   * @return The value of the 'commaweed_id' field.
   */
  public java.lang.CharSequence getCommaweedId() {
    return commaweed_id;
  }

  /**
   * Sets the value of the 'commaweed_id' field.
   * @param value the value to set.
   */
  public void setCommaweedId(java.lang.CharSequence value) {
    this.commaweed_id = value;
  }

  /**
   * Gets the value of the 'commaweed_header' field.
   * @return The value of the 'commaweed_header' field.
   */
  public java.lang.CharSequence getCommaweedHeader() {
    return commaweed_header;
  }

  /**
   * Sets the value of the 'commaweed_header' field.
   * @param value the value to set.
   */
  public void setCommaweedHeader(java.lang.CharSequence value) {
    this.commaweed_header = value;
  }

  /**
   * Gets the value of the 'files' field.
   * @return The value of the 'files' field.
   */
  public java.util.List<commaweed.avro.CommaweedFile> getFiles() {
    return files;
  }

  /**
   * Sets the value of the 'files' field.
   * @param value the value to set.
   */
  public void setFiles(java.util.List<commaweed.avro.CommaweedFile> value) {
    this.files = value;
  }

  /**
   * Creates a new CommaweedSystem RecordBuilder.
   * @return A new CommaweedSystem RecordBuilder
   */
  public static commaweed.avro.CommaweedSystem.Builder newBuilder() {
    return new commaweed.avro.CommaweedSystem.Builder();
  }

  /**
   * Creates a new CommaweedSystem RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CommaweedSystem RecordBuilder
   */
  public static commaweed.avro.CommaweedSystem.Builder newBuilder(commaweed.avro.CommaweedSystem.Builder other) {
    return new commaweed.avro.CommaweedSystem.Builder(other);
  }

  /**
   * Creates a new CommaweedSystem RecordBuilder by copying an existing CommaweedSystem instance.
   * @param other The existing instance to copy.
   * @return A new CommaweedSystem RecordBuilder
   */
  public static commaweed.avro.CommaweedSystem.Builder newBuilder(commaweed.avro.CommaweedSystem other) {
    return new commaweed.avro.CommaweedSystem.Builder(other);
  }

  /**
   * RecordBuilder for CommaweedSystem instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CommaweedSystem>
    implements org.apache.avro.data.RecordBuilder<CommaweedSystem> {

    private java.lang.CharSequence commaweed_id;
    private java.lang.CharSequence commaweed_header;
    private java.util.List<commaweed.avro.CommaweedFile> files;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(commaweed.avro.CommaweedSystem.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.commaweed_id)) {
        this.commaweed_id = data().deepCopy(fields()[0].schema(), other.commaweed_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.commaweed_header)) {
        this.commaweed_header = data().deepCopy(fields()[1].schema(), other.commaweed_header);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.files)) {
        this.files = data().deepCopy(fields()[2].schema(), other.files);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CommaweedSystem instance
     * @param other The existing instance to copy.
     */
    private Builder(commaweed.avro.CommaweedSystem other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.commaweed_id)) {
        this.commaweed_id = data().deepCopy(fields()[0].schema(), other.commaweed_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.commaweed_header)) {
        this.commaweed_header = data().deepCopy(fields()[1].schema(), other.commaweed_header);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.files)) {
        this.files = data().deepCopy(fields()[2].schema(), other.files);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'commaweed_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getCommaweedId() {
      return commaweed_id;
    }

    /**
      * Sets the value of the 'commaweed_id' field.
      * @param value The value of 'commaweed_id'.
      * @return This builder.
      */
    public commaweed.avro.CommaweedSystem.Builder setCommaweedId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.commaweed_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'commaweed_id' field has been set.
      * @return True if the 'commaweed_id' field has been set, false otherwise.
      */
    public boolean hasCommaweedId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'commaweed_id' field.
      * @return This builder.
      */
    public commaweed.avro.CommaweedSystem.Builder clearCommaweedId() {
      commaweed_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'commaweed_header' field.
      * @return The value.
      */
    public java.lang.CharSequence getCommaweedHeader() {
      return commaweed_header;
    }

    /**
      * Sets the value of the 'commaweed_header' field.
      * @param value The value of 'commaweed_header'.
      * @return This builder.
      */
    public commaweed.avro.CommaweedSystem.Builder setCommaweedHeader(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.commaweed_header = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'commaweed_header' field has been set.
      * @return True if the 'commaweed_header' field has been set, false otherwise.
      */
    public boolean hasCommaweedHeader() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'commaweed_header' field.
      * @return This builder.
      */
    public commaweed.avro.CommaweedSystem.Builder clearCommaweedHeader() {
      commaweed_header = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'files' field.
      * @return The value.
      */
    public java.util.List<commaweed.avro.CommaweedFile> getFiles() {
      return files;
    }

    /**
      * Sets the value of the 'files' field.
      * @param value The value of 'files'.
      * @return This builder.
      */
    public commaweed.avro.CommaweedSystem.Builder setFiles(java.util.List<commaweed.avro.CommaweedFile> value) {
      validate(fields()[2], value);
      this.files = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'files' field has been set.
      * @return True if the 'files' field has been set, false otherwise.
      */
    public boolean hasFiles() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'files' field.
      * @return This builder.
      */
    public commaweed.avro.CommaweedSystem.Builder clearFiles() {
      files = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public CommaweedSystem build() {
      try {
        CommaweedSystem record = new CommaweedSystem();
        record.commaweed_id = fieldSetFlags()[0] ? this.commaweed_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.commaweed_header = fieldSetFlags()[1] ? this.commaweed_header : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.files = fieldSetFlags()[2] ? this.files : (java.util.List<commaweed.avro.CommaweedFile>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
